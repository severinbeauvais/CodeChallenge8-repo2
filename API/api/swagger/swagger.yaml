swagger: "2.0"
info:
  version: "1.0.0"
  title: SEISM API
host: localhost:3000
basePath: /api
tags:
- name: "login"
  description: "Everything about Logging In"
  externalDocs:
    description: "Find out more"
    url: "https://github.com/BCDevExchange-CodeChallenge/CodeChallenge8-repo2.git"
- name: "species"
  description: "Operations about Species"
  externalDocs:
    description: "Find out more about our API"
    url: "https://github.com/BCDevExchange-CodeChallenge/CodeChallenge8-repo2.git"
- name: "document"
  description: "Operations about Documents"
  externalDocs:
    description: "Find out more about our API"
    url: "https://github.com/BCDevExchange-CodeChallenge/CodeChallenge8-repo2.git"
schemes:
  - http
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: |
     For accessing the API a valid JWT token must be passed in all the queries in
     the 'Authorization' header.
    
     A valid JWT token is generated by the API and retourned as answer of a call
     to the route /login giving a valid user & password.
  
       The following syntax must be used in the 'Authorization' header :
  
         Bearer xxxxxx.yyyyyyy.zzzzzz

consumes:
  - application/json
produces:
  - application/json

###
### Resource Definitions
###
definitions:
  Authentication:
    type: object
    properties:
      username:
        type: string
        example: "username"
      password:
        type: string
        example: "password"
  Token:
    type: object
    properties:
      token:
        type: string
  Error:
    type: object
    properties:
      message:
        type: string

### Species Definitions
  SpeciesObject:
    type: object
    properties:
      _id:
        type: string
        example: "54759eb3c090d83494e2d804"
        ## TODO: Add more fields here.
  SpeciesFields:
    type: string
    description: "Optional fields to return"
    example: commonName|latinName
    enum: &speciesFields
      - commonName
      - latinName
      - category
      - dateIntroBC
      - description
      - image

### Document Definitions
  DocumentObject:
    type: object
    properties:
      displayName:
        type: string
        example: "A cool document"
        ## TODO: Add more fields here.
  DocumentFields:
    type: string
    description: "Optional fields to return"
    example: displayName|documentFileName
    enum: &documentFields
      - displayName
      - documentFileName
      - internalURL
      - internalMime

###
### Path Definitions
###
paths:

### Login Routes
  /login/token:
    x-swagger-router-controller: login
    options:
      tags:
        - login
      operationId: loginOptions
      summary: "Pre-flight request"
      description: "Options for Login"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Token"
    post:
      tags:
        - login
      operationId: loginPost
      summary: "Get a Bearer token"
      description: "Get a JWT in order to access protected routes"
      parameters:
        - name: authentication
          in: body
          required: true
          schema:
            $ref: "#/definitions/Authentication"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Token"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

### Species Routes
  /species:
    x-swagger-router-controller: species
    options:
      tags:
        - species
      operationId: protectedOptions
      summary: "Pre-flight request"
      description: "Options on Species Route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SpeciesObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - species
      operationId: protectedPost
      summary: "Create a new species"
      description: "Create a new species object"
      security:
        - Bearer: []
      parameters:
        - name: app
          in: body
          required: true
          schema:
            type: object
            properties:
              _id:
                type: string
                example: "54759eb3c090d83494e2d804"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SpeciesObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    head:
      tags:
        - species
      operationId: protectedHead
      summary: "Retrieve META associated with species entries"
      description: "Get META from the request, without returning the payload in question"
      security:
        - Bearer: []
      parameters:
        - in: query
          name: isDeleted
          type: boolean
          required: false
          description: "Whether or not to return deleted species entries"
        - in: query
          collectionFormat: multi
          name: category
          type: string
          required: false
          description: "Get species entries that match this category(ies)"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SpeciesObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - species
      operationId: protectedGet
      summary: "Get a list of species entries"
      description: "Authenticated access to retrieving species"
      security:
        - Bearer: []
      parameters:
        - in: query
          name: fields
          description: "Species fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *speciesFields
        - in: query
          name: isDeleted
          type: boolean
          required: false
          description: "Species that are deleted or not"
        - in: query
          name: pageNum
          type: number
          required: false
          description: "Page number (100 results each)"
        - in: query
          name: pageSize
          type: number
          required: false
          description: "Number of results per page (if 'pageNum' is specified)"
        - in: query
          collectionFormat: multi
          name: category
          type: string
          required: false
          description: "Get species entries that match this category(ies)"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SpeciesObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /species/{speciesId}:
    x-swagger-router-controller: species
    options:
      tags:
        - species
      operationId: protectedOptions
      summary: "Pre-flight request"
      description: "Options on Species GET Route"
      parameters:
        - name: speciesId
          in: path
          description: "ID of species entry to get"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SpeciesObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    head:
      tags:
        - species
      operationId: protectedHead
      summary: "Retrieve META associated with a species entry"
      description: "Get META from the request, without returning the payload in question"
      security:
        - Bearer: []
      parameters:
        - name: speciesId
          in: path
          description: "ID of species entry to get"
          required: true
          type: "string"
        - in: query
          name: isDeleted
          type: boolean
          required: false
          description: "Whether or not to return deleted species entry"
        - in: query
          collectionFormat: multi
          name: category
          type: string
          required: false
          description: "Get a species entry that matches this category(ies)"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SpeciesObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - species
      operationId: protectedGet
      summary: "Get a species entry"
      description: "Authenticated access to retrieve a species object"
      security:
        - Bearer: []
      parameters:
        - name: speciesId
          in: path
          description: "ID of species object to get"
          required: true
          type: "string"
        - in: query
          name: fields
          description: "Species fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *speciesFields
        - in: query
          name: isDeleted
          type: boolean
          required: false
          description: "Whether or not to return deleted species entry"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SpeciesObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - species
      operationId: protectedPut
      summary: "Update a species entry"
      description: "Update a species object"
      security:
        - Bearer: []
      parameters:
        - name: speciesId
          in: path
          description: "ID of species object to update"
          required: true
          type: "string"
        - name: SpeciesObject
          in: body
          required: true
          schema:
            $ref: "#/definitions/SpeciesObject"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SpeciesObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - species
      operationId: protectedDelete
      summary: "Delete a species entry"
      description: "Delete a species object"
      security:
        - Bearer: []
      parameters:
        - name: speciesId
          in: path
          description: "ID of species object to delete"
          required: true
          type: "string"
        - name: SpeciesObject
          in: body
          required: true
          schema:
            $ref: "#/definitions/SpeciesObject"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/SpeciesObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

## Documents
  /document:
    x-swagger-router-controller: document
    options:
      tags:
        - document
      operationId: protectedOptions
      summary: "Pre-flight request"
      description: "Options on Document Route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocumentObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - document
      operationId: protectedPost
      summary: "Create a new document"
      description: "Create a new document object"
      security:
        - Bearer: []
      consumes:
        - multipart/form-data
      parameters:
        - name: upfile
          in: formData
          description: "The file to upload"
          required: true
          type: file
        - name: _species
          in: formData
          description: "The species object to bind this document to"
          required: false
          type: string
        - name: displayName
          in: formData
          description: "The displayName of the file"
          required: false
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocumentObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - document
      operationId: protectedGet
      summary: "Get a list of documents"
      description: "Authenticated access to retreiving a document"
      security:
        - Bearer: []
      parameters:
        - in: query
          name: _species
          description: "Documents relating to a particular species object(s)"
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: fields
          description: "Document fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *documentFields
        - in: query
          name: isDeleted
          type: boolean
          required: false
          description: "Documents that are deleted or not"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocumentObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /document/{docId}:
    x-swagger-router-controller: document
    options:
      tags:
        - document
      operationId: protectedOptions
      summary: "Pre-flight request"
      description: "Options on Document GET Route"
      parameters:
        - name: docId
          in: path
          description: "ID of document to get"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocumentObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - document
      operationId: protectedGet
      summary: "Get a document"
      description: "Authenticated access to retreiving a document"
      security:
        - Bearer: []
      parameters:
        - name: docId
          in: path
          description: "ID of document to get"
          required: true
          type: "string"
        - in: query
          name: fields
          description: "Document fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *documentFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocumentObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - document
      operationId: protectedPut
      summary: "Update/Upload a document"
      description: "Update a document object"
      security:
        - Bearer: []
      consumes:
        - multipart/form-data
      parameters:
        - name: docId
          in: path
          description: "ID of document to update"
          required: true
          type: "string"
        - name: upfile
          in: formData
          description: "The file to upload"
          required: true
          type: file
        - name: _species
          in: formData
          description: "The species object to bind this document to"
          required: false
          type: string
        - name: displayName
          in: formData
          description: "The displayName of the file"
          required: false
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocumentObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - document
      operationId: protectedDelete
      summary: "Delete a document"
      description: "Delete a document object"
      security:
        - Bearer: []
      consumes:
        - application/json
      parameters:
        - name: docId
          in: path
          description: "ID of document to delete"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocumentObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /document/{docId}/download:
    x-swagger-router-controller: document
    options:
      tags:
        - document
      operationId: protectedOptions
      summary: "Pre-flight request"
      description: "Options on Document GET Download Route"
      parameters:
        - name: docId
          in: path
          description: "ID of document to get"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocumentObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - document
      operationId: protectedDownload
      summary: "Download a document"
      description: "Authenticated access to retrieving a document binary"
      security:
        - Bearer: []
      parameters:
        - name: docId
          in: path
          description: "ID of document to download"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocumentObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
