swagger: "2.0"
info:
  version: "1.0.0"
  title: SEISM API
host: localhost:3000
basePath: /api
tags:
- name: "login"
  description: "Everything about Logging In"
  externalDocs:
    description: "Find out more"
    url: "https://github.com/BCDevExchange-CodeChallenge/CodeChallenge8-repo2.git"
- name: "application"
  description: "Operations about Applications"
  externalDocs:
    description: "Find out more about our API"
    url: "https://github.com/BCDevExchange-CodeChallenge/CodeChallenge8-repo2.git"
- name: "document"
  description: "Operations about Documents"
  externalDocs:
    description: "Find out more about our API"
    url: "https://github.com/BCDevExchange-CodeChallenge/CodeChallenge8-repo2.git"
schemes:
  - http
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: |
     For accessing the API a valid JWT token must be passed in all the queries in
     the 'Authorization' header.
    
     A valid JWT token is generated by the API and retourned as answer of a call
     to the route /login giving a valid user & password.
  
       The following syntax must be used in the 'Authorization' header :
  
         Bearer xxxxxx.yyyyyyy.zzzzzz

consumes:
  - application/json
produces:
  - application/json

definitions:
  Authentication:
    type: object
    properties:
      username:
        type: string
        example: "username"
      password:
        type: string
        example: "password"

### Species Definitions
  AppId:
    type: object
    properties:
      _id:
        type: string
        example: "54759eb3c090d83494e2d804"
  AppObject:
    type: object
    properties:
      _id:
        type: string
        example: "54759eb3c090d83494e2d804"
        ## TODO: Add more fields here.
  Application:
    type: string
    description: "Optional fields to return."
    example: name|type
    enum: &applicationFields
      - commonName
      - latinName
      - category
      - dateIntroBC
      - description
      - image

### Document Definitions
  DocId:
    type: object
    properties:
      displayName:
        type: string
        example: "A cool document"
  DocObject:
    type: object
    properties:
      displayName:
        type: string
        example: "A cool document"
        ## TODO: Add more fields here.
  DocumentFields:
    type: string
    description: "Optional fields to return."
    example: name|type
    #TODO: Fix enums
    enum: &documentFields
      - displayName
      - documentFileName
      - internalURL
      - internalMime

### Resource Definitions
  Token:
    type: object
    properties:
      token:
        type: string
  Error:
    type: object
    properties:
      message:
        type: string

###
### Path Definitions
###
paths:

### Login Routes
  /login/token:
    x-swagger-router-controller: login
    options:
      tags:
        - login
      operationId: loginOptions
      summary: "Pre-flight request"
      description: "Options for Login"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Token"
    post:
      tags:
        - login
      operationId: loginPost
      summary: "Get a Bearer token"
      description: "Get a JWT in order to access protected routes"
      parameters:
        - name: authentication
          in: body
          required: true
          schema:
            $ref: "#/definitions/Authentication"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Token"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

### Application Routes
  /application:
    x-swagger-router-controller: application
    options:
      tags:
        - application
      operationId: protectedOptions
      summary: "Pre-flight request"
      description: "Options on Application Route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/AppObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - application
      operationId: protectedPost
      summary: "Create a new application"
      description: "Create a new application object"
      security:
        - Bearer: []
      parameters:
        - name: app
          in: body
          required: true
          schema:
            $ref: "#/definitions/AppId"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/AppObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    head:
      tags:
        - application
      operationId: protectedHead
      summary: "Retrieve META associated with an application"
      description: "Get META from the request, without returning the payload in question"
      security:
        - Bearer: []
      parameters:
        - in: query
          name: fields
          description: "Application fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *applicationFields
        - in: query
          name: isDeleted
          type: boolean
          required: false
          description: "Applications that are deleted or not"
        - in: query
          name: pageNum
          type: number
          required: false
          description: "Page number (100 results each)."
        - in: query
          name: pageSize
          type: number
          required: false
          description: "Number of results per page (if 'pageNum' is specified)."
        - in: query
          name: tantalisId
          type: number
          required: false
          description: "Get an Application that contain this specific disposition."
        - in: query
          name: cl_file
          type: number
          required: false
          description: "Get an Application that relates to this crown lands file."
        - in: query
          collectionFormat: multi
          name: purpose
          type: string
          required: false
          description: "Get an Application that relates to this purpose."
        - in: query
          collectionFormat: multi
          name: subpurpose
          type: string
          required: false
          description: "Get an Application that relates to this subpurpose."
        - in: query
          collectionFormat: multi
          name: status
          type: string
          required: false
          description: "Get an Application that relates to this status."
        - in: query
          name: type
          type: string
          required: false
          description: "Get an Application that relates to this type."
        - in: query
          name: subtype
          type: string
          required: false
          description: "Get an Application that relates to this subtype."
        - in: query
          name: agency
          type: string
          required: false
          description: "Get an Application that relates to this subagencytype."
        - in: query
          name: businessUnit
          type: string
          required: false
          description: "Get an Application that relates to this businessUnit."
        - in: query
          name: client
          type: string
          required: false
          description: "Get an Application that relates to this client."
        - in: query
          name: tenureStage
          type: string
          required: false
          description: "Get an Application that relates to this tenureStage."
        - in: query
          name: areaHectares
          collectionFormat: multi
          type: string
          required: false
          description: "Get an Application that relates to size of areaHectares."
        - in: query
          name: centroid
          required: false
          description: "Query applications that have their centroid fall within the supplied coordinates."
          type: string
        - in: query
          name: publishDate
          collectionFormat: multi
          required: false
          description: "Query application publish dates.  Multiple parameter instaces is supported."
          type: string
          format: date-time
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/AppObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - application
      operationId: protectedGet
      summary: "Get a list of species entries"
      description: "Authenticated access to retrieving applications"
      security:
        - Bearer: []
      parameters:
        - in: query
          name: fields
          description: "Application fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *applicationFields
        - in: query
          name: isDeleted
          type: boolean
          required: false
          description: "Applications that are deleted or not"
        - in: query
          name: pageNum
          type: number
          required: false
          description: "Page number (100 results each)."
        - in: query
          name: pageSize
          type: number
          required: false
          description: "Number of results per page (if 'pageNum' is specified)."
        - in: query
          name: tantalisId
          type: number
          required: false
          description: "Get an Application that contain this specific disposition."
        - in: query
          name: cl_file
          type: number
          required: false
          description: "Get an Application that relates to this crown lands file."
        - in: query
          collectionFormat: multi
          name: purpose
          type: string
          required: false
          description: "Get an Application that relates to this purpose."
        - in: query
          collectionFormat: multi
          name: subpurpose
          type: string
          required: false
          description: "Get an Application that relates to this subpurpose."
        - in: query
          collectionFormat: multi
          name: status
          type: string
          required: false
          description: "Get an Application that relates to this status."
        - in: query
          name: type
          type: string
          required: false
          description: "Get an Application that relates to this type."
        - in: query
          name: subtype
          type: string
          required: false
          description: "Get an Application that relates to this subtype."
        - in: query
          name: agency
          type: string
          required: false
          description: "Get an Application that relates to this subagencytype."
        - in: query
          name: businessUnit
          type: string
          required: false
          description: "Get an Application that relates to this businessUnit."
        - in: query
          name: client
          type: string
          required: false
          description: "Get an Application that relates to this client."
        - in: query
          name: tenureStage
          type: string
          required: false
          description: "Get an Application that relates to this tenureStage."
        - in: query
          name: areaHectares
          collectionFormat: multi
          type: string
          required: false
          description: "Get an Application that relates to size of areaHectares."
        - in: query
          name: centroid
          required: false
          description: "Query applications that have their centroid fall within the supplied coordinates."
          type: string
        - in: query
          name: publishDate
          collectionFormat: multi
          required: false
          description: "Query application publish dates.  Multiple parameter instaces is supported."
          type: string
          format: date-time
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/AppObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /application/{appId}:
    x-swagger-router-controller: application
    options:
      tags:
        - application
      operationId: protectedOptions
      summary: "Pre-flight request"
      description: "Options on Application GET Route"
      parameters:
        - name: appId
          in: path
          description: "ID of application to get"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/AppObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    head:
      tags:
        - application
      operationId: protectedHead
      summary: "Retrieve META associated with an application"
      description: "Get META from the request, without returning the payload in question"
      security:
        - Bearer: []
      parameters:
        - name: appId
          in: path
          description: "ID of application to get"
          required: true
          type: "string"
        - in: query
          name: fields
          description: "Application fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *applicationFields
        - in: query
          name: isDeleted
          type: boolean
          required: false
          description: "Applications that are deleted or not"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/AppObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - application
      operationId: protectedGet
      summary: "Get an application"
      description: "Authenticated access to retrieving an application"
      security:
        - Bearer: []
      parameters:
        - name: appId
          in: path
          description: "ID of application to get"
          required: true
          type: "string"
        - in: query
          name: fields
          description: "Application fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *applicationFields
        - in: query
          name: isDeleted
          type: boolean
          required: false
          description: "Applications that are deleted or not"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/AppObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - application
      operationId: protectedPut
      summary: "Update an application"
      description: "Update an application object"
      security:
        - Bearer: []
      parameters:
        - name: appId
          in: path
          description: "ID of application to update"
          required: true
          type: "string"
        - name: AppObject
          in: body
          required: true
          schema:
            $ref: "#/definitions/AppObject"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/AppObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - application
      operationId: protectedDelete
      summary: "Delete an application"
      description: "Delete an application object"
      security:
        - Bearer: []
      parameters:
        - name: appId
          in: path
          description: "ID of application to delete"
          required: true
          type: "string"
        - name: AppObject
          in: body
          required: true
          schema:
            $ref: "#/definitions/AppObject"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/AppObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

## Documents
  /document:
    x-swagger-router-controller: document
    options:
      tags:
        - document
      operationId: protectedOptions
      summary: "Pre-flight request"
      description: "Options on Document Route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - document
      operationId: protectedPost
      summary: "Create a new document"
      description: "Create a new document object"
      security:
        - Bearer: []
      consumes:
        - multipart/form-data
      parameters:
        - name: upfile
          in: formData
          description: "The file to upload."
          required: true
          type: file
        - name: _application
          in: formData
          description: "The application to bind this document to."
          required: false
          type: string
        - name: _decision
          in: formData
          description: "The decision to bind this document to."
          required: false
          type: string
        - name: _comment
          in: formData
          description: "The comment to bind this document to."
          required: false
          type: string
        - name: displayName
          in: formData
          description: "The displayName of the file."
          required: false
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - document
      operationId: protectedGet
      summary: "Get a list of documents"
      description: "Authenticated access to retreiving a document"
      security:
        - Bearer: []
      parameters:
        - in: query
          name: _application
          description: "Documents relating to a particular Application(s)"
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: _decision
          description: "Documents relating to a particular Decision(s)"
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: _comment
          description: "Documents relating to a particular Comment(s)"
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: fields
          description: "Document fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *documentFields
        - in: query
          name: isDeleted
          type: boolean
          required: false
          description: "Documents that are deleted or not"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /document/{docId}:
    x-swagger-router-controller: document
    options:
      tags:
        - document
      operationId: protectedOptions
      summary: "Pre-flight request"
      description: "Options on Document GET Route"
      parameters:
        - name: docId
          in: path
          description: "ID of document to get"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - document
      operationId: protectedGet
      summary: "Get a document"
      description: "Authenticated access to retreiving a document"
      security:
        - Bearer: []
      parameters:
        - name: docId
          in: path
          description: "ID of document to get"
          required: true
          type: "string"
        - in: query
          name: fields
          description: "Document fields to return."
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *documentFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - document
      operationId: protectedPut
      summary: "Update/Upload a document"
      description: "Update a document object"
      security:
        - Bearer: []
      consumes:
        - multipart/form-data
      parameters:
        - name: docId
          in: path
          description: "ID of document to update"
          required: true
          type: "string"
        - name: upfile
          in: formData
          description: "The file to upload."
          required: true
          type: file
        - name: _application
          in: formData
          description: "The application to bind this document to."
          required: false
          type: string
        - name: _decision
          in: formData
          description: "The decision to bind this document to."
          required: false
          type: string
        - name: _comment
          in: formData
          description: "The comment to bind this document to."
          required: false
          type: string
        - name: displayName
          in: formData
          description: "The displayName of the file."
          required: false
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - document
      operationId: protectedDelete
      summary: "Delete a document"
      description: "Delete a document object"
      security:
        - Bearer: []
      consumes:
        - application/json
      parameters:
        - name: docId
          in: path
          description: "ID of document to delete"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /document/{docId}/download:
    x-swagger-router-controller: document
    options:
      tags:
        - document
      operationId: protectedOptions
      summary: "Pre-flight request"
      description: "Options on Document GET Download Route"
      parameters:
        - name: docId
          in: path
          description: "ID of document to get"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - document
      operationId: protectedDownload
      summary: "Download a document"
      description: "Authenticated access to retrieving a document binary"
      security:
        - Bearer: []
      parameters:
        - name: docId
          in: path
          description: "ID of document to download"
          required: true
          type: "string"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DocObject"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
